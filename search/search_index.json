{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>A reimplementation of FMS90 in PyTorch</p>"},{"location":"#installation","title":"Installation","text":"<p>Recommended installation:</p> <p><code>pip install fms24</code></p> <p>One can also install from github:</p> <p><code>pip install git+https://github.com/fms24/fms24.git</code></p>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code>import numpy\n\nprint(\"Hello, world!\")\n</code></pre>"},{"location":"#electronic-structure","title":"Electronic Structure","text":"<p>Currently, only TeraChem and Q-Chem are supported. If you would like a specific program to be supported, please open an issue.</p>"},{"location":"#ml-potentials","title":"ML Potentials","text":"<p>We currently support Nequip-style potentials. Create potentials for the adiabatic states of interest add the path(s) to your <code>config.yaml</code>.</p> <pre><code>ml_potentials:\n  - type: \"nequip\"\n    paths:\n      - {path: \"path/to/first/ml/potential\", order: 0}\n      - {path: \"path/to/second/ml/potential\", order: 1}\n      - {path: \"path/to/third/ml/potential\", order: 2}\n</code></pre>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Written by Pablo Unzueta and Todd Martinez. We'd like to thank the NSF MPS-ASCEND (Grant No. X) for financial support.</p>"},{"location":"documentation/","title":"Documentation","text":""},{"location":"documentation/#src.fms24.bomd.BOMD","title":"src.fms24.bomd.BOMD","text":"<pre><code>BOMD(config='config.yaml')\n</code></pre> Source code in <code>src/fms24/bomd.py</code> <pre><code>def __init__(self, config=\"config.yaml\"):\n    self.config = config\n    self.device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n    self.atoms = None\n    self.positions = []\n    self.velocities = []\n    self.forces = []\n    self.timesteps = []\n    self.atoms_list = None\n</code></pre>"},{"location":"documentation/#src.fms24.bomd.BOMD.call_potential","title":"call_potential","text":"<pre><code>call_potential()\n</code></pre> <p>Call the potential energy calculator</p> <p>Warning</p> <p>Using dummy Lennard-Jones potential for now</p> Source code in <code>src/fms24/bomd.py</code> <pre><code>def call_potential(self):\n    \"\"\"\n    Call the potential energy calculator\n\n    !!! warning \n        Using dummy Lennard-Jones potential for now\n    \"\"\"\n    energy, forces = self.lj_potential(self.positions[-1])\n    return energy, forces\n</code></pre>"}]}